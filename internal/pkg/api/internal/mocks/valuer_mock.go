// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	enums "github.com/vimek-go/server-faker/internal/pkg/enums"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ValuerMock is an autogenerated mock type for the valuer type
type ValuerMock struct {
	mock.Mock
}

// Generate provides a mock function with given fields: c
func (_m *ValuerMock) Generate(c *gin.Context) (interface{}, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNil provides a mock function with given fields:
func (_m *ValuerMock) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *ValuerMock) Type() enums.GenerationType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 enums.GenerationType
	if rf, ok := ret.Get(0).(func() enums.GenerationType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(enums.GenerationType)
	}

	return r0
}

// NewValuerMock creates a new instance of ValuerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValuerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValuerMock {
	mock := &ValuerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
