// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// PluginLoaderMock is an autogenerated mock type for the pluginLoader type
type PluginLoaderMock struct {
	mock.Mock
}

// Load provides a mock function with given fields: path
func (_m *PluginLoaderMock) Load(path string) (func(*gin.Context), error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 func(*gin.Context)
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (func(*gin.Context), error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) func(*gin.Context)); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gin.Context))
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPluginLoaderMock creates a new instance of PluginLoaderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginLoaderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginLoaderMock {
	mock := &PluginLoaderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
