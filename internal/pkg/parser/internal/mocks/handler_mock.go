// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// HandlerMock is an autogenerated mock type for the handler type
type HandlerMock struct {
	mock.Mock
}

// Method provides a mock function with given fields:
func (_m *HandlerMock) Method() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Respond provides a mock function with given fields: c
func (_m *HandlerMock) Respond(c *gin.Context) {
	_m.Called(c)
}

// URL provides a mock function with given fields:
func (_m *HandlerMock) URL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewHandlerMock creates a new instance of HandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerMock {
	mock := &HandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
